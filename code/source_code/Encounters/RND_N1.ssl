/*******************************************************************************
        Name:
        Location:
        Description: Object template script

            Created: by sFall Script Editor
            Updated:

*******************************************************************************/

/* Include Files */
#include "..\headers\define.h"
#include "..\headers\command.h"


/* Standard Script Procedures */
procedure start;
procedure description_p_proc;
procedure look_at_p_proc;
procedure damage_p_proc;
procedure use_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure drop_p_proc;
procedure is_dropping_p_proc;
procedure pickup_p_proc;
procedure map_enter_p_proc;

/* Defines */


/*****************************************************************
   Local Variables which are saved.
   All Local Variables need to be prepended by LVAR_
*****************************************************************/


/*******************************************************************
   Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_)
*******************************************************************/


/*******************************************************************
   Local variables which do not need to be saved between map changes.
*******************************************************************/


/*******************************************************************
*                           PROCEDURES                             *
*******************************************************************/

procedure start begin

end

procedure look_at_p_proc begin
   script_overrides;

end

   variable Tot_critter_A;
   variable Tot_critter_B;
   variable Outer_ring;
   variable Inner_ring;
   variable group_angle;
   variable Critter_type;
   variable Critter_script;
   variable Critter_direction;
   variable Critter;
   variable Range;
   variable Critter_tile;
   variable Dude_tile;
   variable victim;

procedure Place_critter
begin
    variable LVar0 := 0;
    variable LVar1 := 0;
    Critter := create_object_sid(Critter_type, 0, 0, Critter_script);
    Range := random(Inner_ring, Outer_ring);
    LVar0 := random(0, 5);
    Critter_tile := tile_num_in_direction(Dude_tile, Critter_direction, Range);
    LVar1 := tile_num_in_direction(Critter_tile, LVar0, Range / 2);
    if ((tile_distance(Dude_tile, LVar1) <= Outer_ring) and (tile_distance(Dude_tile, LVar1) >= Inner_ring)) then begin
        Critter_tile := tile_num_in_direction(Critter_tile, LVar0, Range / 2);
    end
    critter_attempt_placement(Critter, Critter_tile, 0);
end

procedure map_enter_p_proc begin
   //display_msg(message_str(SCRIPT_RNDDESRT, 104));
   //set_obj_visibility(self_obj, true);
   display_msg("DZIALLALALAAA HAHAHAA");
    Tot_Critter_A := random(3, 6);
    Tot_Critter_B := random(4, 8);
    Outer_ring := (get_critter_stat(dude_obj, STAT_pe) / 2) + 6;
    Inner_ring := (get_critter_stat(dude_obj, STAT_pe) / 2) + 4;
    group_angle := random(0, 5);
    Critter_type := 16777227;
    Critter_script := 19;
    while (Tot_Critter_A) do begin
        Critter_direction := group_angle + (random(0, 2) - 1);
        while (Critter_direction < 0) do begin
            Critter_direction := Critter_direction + 6;
        end
        if (Critter_direction > 5) then begin
            Critter_direction := Critter_direction % 6;
        end
        call Place_critter();
        if (group_angle == 0) then begin
            Critter_direction := 3;
        end
        else begin
            if (group_angle == 1) then begin
                Critter_direction := 4;
            end
            else begin
                if (group_angle == 2) then begin
                    Critter_direction := 5;
                end
                else begin
                    if (group_angle == 3) then begin
                        Critter_direction := 0;
                    end
                    else begin
                        if (group_angle == 4) then begin
                            Critter_direction := 1;
                        end
                        else begin
                            if (group_angle == 5) then begin
                                Critter_direction := 2;
                            end
                        end
                    end
                end
            end
        end
        if (random(0, 2) == 0) then begin
            Critter_direction := Critter_direction + (random(0, 2) - 1);
            while (Critter_direction < 0) do begin
                Critter_direction := Critter_direction + 6;
            end
            if (Critter_direction > 5) then begin
                Critter_direction := Critter_direction % 6;
            end
        end
        anim(Critter, 1000, Critter_direction);
        Tot_Critter_A := Tot_Critter_A - 1;
    end
    victim := Critter;
    Critter_script := 222;
    if (group_angle == 0) then begin
        group_angle := 3;
    end
    else begin
        if (group_angle == 1) then begin
            group_angle := 4;
        end
        else begin
            if (group_angle == 2) then begin
                group_angle := 5;
            end
            else begin
                if (group_angle == 3) then begin
                    group_angle := 0;
                end
                else begin
                    if (group_angle == 4) then begin
                        group_angle := 1;
                    end
                    else begin
                        if (group_angle == 5) then begin
                            group_angle := 2;
                        end
                    end
                end
            end
        end
    end
    while (Tot_Critter_B) do begin
        if (random(0, 3) == 3) then begin
            Critter_type := 16777226;
        end
        else begin
            Critter_type := 16777378;
        end
        Critter_direction := group_angle + (random(0, 2) - 1);
        while (Critter_direction < 0) do begin
            Critter_direction := Critter_direction + 6;
        end
        if (Critter_direction > 5) then begin
            Critter_direction := Critter_direction % 6;
        end
        call Place_critter();
        if (group_angle == 0) then begin
            Critter_direction := 3;
        end
        else begin
            if (group_angle == 1) then begin
                Critter_direction := 4;
            end
            else begin
                if (group_angle == 2) then begin
                    Critter_direction := 5;
                end
                else begin
                    if (group_angle == 3) then begin
                        Critter_direction := 0;
                    end
                    else begin
                        if (group_angle == 4) then begin
                            Critter_direction := 1;
                        end
                        else begin
                            if (group_angle == 5) then begin
                                Critter_direction := 2;
                            end
                        end
                    end
                end
            end
        end
        if (random(0, 2) == 0) then begin
            Critter_direction := Critter_direction + (random(0, 2) - 1);
            while (Critter_direction < 0) do begin
                Critter_direction := Critter_direction + 6;
            end
            if (Critter_direction > 5) then begin
                Critter_direction := Critter_direction % 6;
            end
        end
        anim(Critter, 1000, Critter_direction);
        Tot_Critter_B := Tot_Critter_B - 1;
    end
    attack_setup(dude_obj, victim);
    attack_setup(dude_obj, Critter);
    attack_setup(Critter, victim);
end

procedure description_p_proc begin
   script_overrides;

end

procedure damage_p_proc begin

end

procedure use_p_proc begin

end

procedure use_obj_on_p_proc begin

end

procedure use_skill_on_p_proc begin

end

procedure drop_p_proc begin

end

procedure is_dropping_p_proc begin

end

procedure pickup_p_proc begin

end
