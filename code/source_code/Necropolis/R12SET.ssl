/*
        Name:
        Location:
        Description:

*/

/* Include Files */

#include "..\headers\define.h"
//#include "..\headers\<TownName.h>"

#define NAME                    SCRIPT_R12SET
#define TOWN_REP_VAR            (GVAR_TOWN_REP_ARROYO)

#include "..\headers\command.h"
#include "..\headers\ModReact.h"
#include "..\headers\PartyBkg.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure timed_event_p_proc;


/* Script Specific Procedure Calls */
procedure Node998;                                      // This Node is Always Combat
procedure Node999;                                      // This Node is Always Ending




// The next lines are added in by the Designer Tool.
procedure FirstTalk;
procedure KillHim;
procedure FirstTalk2;
procedure FirstTalk3;
procedure ImGoingOut;
procedure FirstTalk4;
procedure FirstTalk5;
procedure AddQuest;

procedure QuestStatus;
procedure QuestDone;
procedure GunsGunsGuns;
procedure Garret_gives_weapons;

/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)
#define LVAR_Caught_Thief               (7)
#define LVAR_was_here                   (8)
#define LVAR_state                      (9) // 0-czyste konto 1-spaliles sie na amen przed setem 2-podczas questa 3-quest wykonany po doniesieniu mu 10-zginiesz jak cie zobaczy

/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */


/* Local variables which do not need to be saved between map changes. */


procedure start begin

end

/* This procedure will get called each time that the map is first entered. It will
   set up the Team number and AI packet for this critter. This will override the
   default from the prototype, and needs to be set in scripts. */
procedure map_enter_p_proc begin
if (map_first_run) then set_local_var(LVAR_was_here,0);

end

/* Every heartbeat that the critter gets, this procedure will be called. Anything from
   Movement to attacking the player on sight can be placed in here.*/
variable czy_gadac;
procedure critter_p_proc begin

/* If the critter is mad at the player for any reason, it will attack and remember to attack
   the player should the game be saved and loaded repeatedly. Additionally, if any special
   actions need to be taken by the critter based on previous combat, the critter will remember
   this as well. */

   if ((local_var(LVAR_Hostile) > 1) and (obj_can_see_obj(self_obj, dude_obj))) or local_var(LVAR_state) == 10 then begin
       set_local_var(LVAR_Hostile,1);
       self_attack_dude; //Macro made by Tom to keep the critter fleeing.
   end
   
   //if tile_distance_objs(self_obj,dude_obj) >=5 then czy_gadac:=0;
   //if tile_distance_objs(self_obj,dude_obj) < 5 then call talk_p_proc;
   //if czy_gadac == 1 then begin call talk_p_proc; czy_gadac:=2; end

   if local_var(LVAR_state) == 1 and dude_elevation != 2 then set_local_var(LVAR_state,10);
   
end

/* Whenever the critter takes damage of any type, this procedure will be called. Things
   like setting ENEMY_ and LVAR_Personal_Enemy can be set here. */
procedure damage_p_proc begin

/* If the player causes damage to this critter, then he will instantly consider the player
   his personal enemy. In Critter_Proc or through dialog, actions will be taken against
   the player for his evil acts. */

   if (obj_in_party(source_obj)) then begin
       set_local_var(LVAR_Personal_Enemy, 1);
   end

end

/* Any time that the player is caught stealing from this critter, Pickup_proc will be called.
   In here, various things can happen. The most common response is instant hostility which
   will be remembered. */
procedure pickup_p_proc begin

   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Hostile, 2);
   end
   
end

/* The dialog system is setup and prepares the player to talk to this NPC. Where To Go
   written by designers are placed in here. Additionally, Reactions are generated and
   stored which affects player interactions. */
procedure talk_p_proc begin
   Evil_Critter:=0;
   Slavery_Tolerant:=SLAVE_TOLERANT;
   Karma_Perception:=KARMA_PERCEPTION1;

   CheckKarma;

   GetReaction;
      
   if local_var(LVAR_state) == 1 then float_msg(self_obj,"Odejdz, nie zaslugujesz stac w moim cieniu",FLOAT_MSG_GREEN);
   else begin
         start_gdialog(NAME,self_obj,4,HEAD_ELDER,BACKGROUND_VAULT);
         gSay_Start;
            if local_var(LVAR_state)==0 then call FirstTalk;
            if local_var(LVAR_state)==2 then call QuestStatus;
         gSay_End;
         end_dialogue;
   end

end

/* This procedure gets called only on the death of this NPC. Special things like
   incrementing the death count for reputation purposes and Enemy Counters are placed
   in here. */
procedure destroy_p_proc begin

/* Increment the aligned critter counter*/
/* inc_good_critter */
/* inc_evil_critter */
   inc_neutral_critter 

/* Set global_variable for Enemy status*/

end

/* Look_at_p_proc gets called any time that the player passes the cursor over any object.
   This should only hold the most cursory of glances for the player. */
procedure look_at_p_proc begin

   script_overrides;
   if (local_var(LVAR_Herebefore) == 0) then
      display_mstr(100);
   else display_mstr(101);

end

/* The player will see more indepth descriptions from this procedure. They are actively
   looking at the critter and want more information. Things like names can be added here
   if the critter is known to the player. */
procedure description_p_proc begin

   script_overrides;
   display_mstr(102);

end

/* Any time a skill is used on a critter this call is made. This can be to give examinations
   for things like Doctor skill or messages for various other skills. */
procedure use_skill_on_p_proc begin
      
end

/* Should the Player ever cause the NPC too much discomfort that he desires to attack the player,
   this call will be made. Essentially, it stores the Hostile vaule so that the critter remembers
   he was once hostile towards the player.*/
procedure Node998 begin

   set_local_var(LVAR_Hostile, 2);
   
end

/* Anytime that there is a need for an ending to dialog, this node is to be called. It will just
   exit from the dialog system without any reprisals from the NPC. */
procedure Node999 begin

end

procedure FirstTalk begin
Reply(mstr(135));
NOption(136,FirstTalk2,004);
NOption(137,KillHim,004);
end

procedure KillHim begin
Reply(mstr(304));
NOption(235,Node999,004);
call Node998;
end

procedure FirstTalk2 begin
Reply(mstr(138));
NOption(139,FirstTalk3,004);
end

procedure FirstTalk3 begin
Reply(mstr(140));
NOption(141,FirstTalk4,004);
NOption(142,ImGoingOut,004);
end

procedure ImGoingOut begin
Reply(mstr(238));
set_local_var(LVAR_state,1);
NOption(183,Node999,004);
end

procedure FirstTalk4 begin
Reply(mstr(143));
NOption(144,FirstTalk5,004);
NOption(142,ImGoingOut,004);
end

procedure FirstTalk5 begin
Reply(mstr(194));
NOption(147,AddQuest,004);
end

procedure AddQuest begin
call Node999;
set_local_var(LVAR_state,2);
set_global_var(GVAR_V12_QUEST_CHILDS_DED,1);
add_timer_event(self_obj,20,0);
end

procedure QuestStatus begin
Reply(mstr(188));
NOption(189,Node999,004);
NOption(190,Node999,004);
//warunek ze zrobione i potwierdzenie na dole
if true then NOption(210,QuestDone,004);
end

procedure timed_event_p_proc begin
      if (fixed_param==0) then begin
            float_msg(self_obj,mstr(2000),FLOAT_MSG_GREEN);
      end
      
      if (fixed_param==1) then begin
            Evil_Critter:=0;
   Slavery_Tolerant:=SLAVE_TOLERANT;
   Karma_Perception:=KARMA_PERCEPTION1;

   CheckKarma;

   GetReaction;
      
   if local_var(LVAR_state) == 1 then float_msg(self_obj,"Odejdz, nie zaslugujesz stac w moim cieniu",FLOAT_MSG_GREEN);
   else begin
         start_gdialog(NAME,self_obj,4,HEAD_ELDER,BACKGROUND_VAULT);
         gSay_Start;
            if local_var(LVAR_state)==0 then call FirstTalk;
            if local_var(LVAR_state)==2 then call QuestStatus;
         gSay_End;
         end_dialogue;
   end
      end
end

procedure QuestDone begin
Reply(mstr(259));
NOption(261,GunsGunsGuns,004);
end

procedure GunsGunsGuns begin
Reply(mstr(269));
NOption(280,Garret_gives_weapons,004);
end

procedure Garret_gives_weapons begin

end